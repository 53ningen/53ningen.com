type Article
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [read, update, delete] }
    ]
  )
  @model(subscriptions: null) {
  slug: ID! @primaryKey
  title: String!
  body: String!
  description: String
  pinned: Boolean!
  draft: Boolean
  category: Category! @belongsTo
  tags: [Tag] @manyToMany(relationName: "ArticleTags")
  type: String!
    @index(
      name: "articlesByCreatedAt"
      queryField: "listArticlesOrderByCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Category
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [read, update, delete] }
    ]
  )
  @model(subscriptions: null) {
  id: ID!
  articles: [Article] @hasMany
}

type Tag
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      { allow: owner }
      { allow: groups, groups: ["admin"], operations: [read, update, delete] }
    ]
  )
  @model(subscriptions: null) {
  id: ID!
  articles: [Article] @manyToMany(relationName: "ArticleTags")
}

type Document
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: private, provider: iam }
    ]
  )
  @model(subscriptions: null) {
  slug: ID! @primaryKey
  title: String!
  kana: String!
  body: String!
  type: String!
    @index(
      name: "DocumentByKana"
      queryField: "listDocumentsOrderByKana"
      sortKeyFields: ["kana"]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}
